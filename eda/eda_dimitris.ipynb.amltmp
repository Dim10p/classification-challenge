{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## First classification attempt using GPT 3.5 model"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Install packages\n",
        "%pip install tiktoken openpyxl matplotlib"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: tiktoken in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (0.7.0)\nRequirement already satisfied: openpyxl in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (3.1.5)\nRequirement already satisfied: matplotlib in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (3.9.0)\nRequirement already satisfied: regex>=2022.1.18 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from tiktoken) (2024.5.15)\nRequirement already satisfied: requests>=2.26.0 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from tiktoken) (2.32.3)\nRequirement already satisfied: et-xmlfile in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from openpyxl) (1.1.0)\nRequirement already satisfied: contourpy>=1.0.1 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (1.2.1)\nRequirement already satisfied: cycler>=0.10 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (4.53.0)\nRequirement already satisfied: kiwisolver>=1.3.1 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: numpy>=1.23 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (24.1)\nRequirement already satisfied: pillow>=8 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (10.3.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (3.1.2)\nRequirement already satisfied: python-dateutil>=2.7 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (2.9.0.post0)\nRequirement already satisfied: importlib-resources>=3.2.0 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from matplotlib) (6.4.0)\nRequirement already satisfied: zipp>=3.1.0 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib) (3.19.2)\nRequirement already satisfied: six>=1.5 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from requests>=2.26.0->tiktoken) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from requests>=2.26.0->tiktoken) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from requests>=2.26.0->tiktoken) (2.2.1)\nRequirement already satisfied: certifi>=2017.4.17 in /anaconda/envs/jupyter_env/lib/python3.9/site-packages (from requests>=2.26.0->tiktoken) (2024.6.2)\nNote: you may need to restart the kernel to use updated packages.\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773836974
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import packages\n",
        "import asyncio\n",
        "import aiohttp\n",
        "import ssl\n",
        "import certifi\n",
        "import pandas as pd\n",
        "import json\n",
        "import tiktoken\n",
        "import requests\n",
        "import matplotlib.pyplot as plt"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773837680
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Read data\n",
        "df = pd.read_csv(f\"{os.getcwd()}/wi_dataset.csv\",\n",
        "                 index_col=None,\n",
        "                 header=0,\n",
        "                 engine='python',\n",
        "                 encoding='utf-8')"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773842340
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Read taxonomy\n",
        "tax = pd.read_excel(\"ISCO-08 EN Structure and definitions.xlsx\")"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773842883
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Clean data a bit to tokenize\n",
        "df = df[df.description.notna()]\n",
        "df.description = df.description.astype(str)"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773843332
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Count tokens using tiktoken (as ChatGPT does)\n",
        "\n",
        "# Initialize the tokenizer for the GPT-3.5-turbo model\n",
        "tokenizer = tiktoken.encoding_for_model(\"gpt-3.5-turbo\")\n",
        "\n",
        "# Define function to count tokens in a description\n",
        "def count_tokens(description):\n",
        "    tokens = tokenizer.encode(description)\n",
        "    return len(tokens)\n",
        "\n",
        "# Apply the function to the 'description' column\n",
        "df['description_token_count'] = df['description'].apply(count_tokens)"
      ],
      "outputs": [],
      "execution_count": 16,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773886476
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a random job description <- 349 tokens\n",
        "desc = df.description[3]\n",
        "print(desc)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Are you looking for a role as a Care Assistant in Ayshire? Do you have a Driving License and Access to a Vehicle? Do you feel that you have what it takes to be a wonderful and compassionate Care Assistant? We are looking for individuals like you to work as a community Care Assistant in your local community. No previous experience is required. At Cera our main priority is to find people with the right values, behaviours and attitudes that can support our mission to help people live longer, healthier and happier lives in their own homes. It would be great to have YOU as part of our team. Our roles include providing personal care and we do require carers to have their own vehicle and driving license. At Cera we arm you with everything you need to give outstanding levels of care; award winning technology, PPE and comprehensive training. Your responsibilities as a Cera Care Assistant: Supporting and assisting with all personal care requirements Providing companionship and supportive listening Observing and reporting any changes in the health or status of the patient Preparing meals and feeding patients Prompting and administering medication Providing support with hobbies, studies, and social activities Completing administrative tasks and care reports. In return for your commitment and hard work, Cera offers: • FREE PVG Checks • FREE Professional Uniform • Flexible Hours - part time or full time, you choose! • Pay rates start from £9.30 per hour. • Mileage Paid • Mobile phone and work app to support with administrative tasks • 3% Company Pension Scheme • Paid assessment day training Postcode areas covered:KA1, KA6, KA7, KA8, KA9, KA10, KA11, KA12, KA19 and KA26 REFTNAYRSCOT\n"
        }
      ],
      "execution_count": 17,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773886903
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get Level 1 taxonomies\n",
        "level_1_titles = \"\\n\".join([f\"{row['ISCO 08 Code']}. {row['Title EN']}\" for idx, row in tax[tax[\"Level\"] == 1].iterrows()])\n",
        "print(level_1_titles)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "1. Managers\n2. Professionals\n3. Technicians and Associate Professionals\n4. Clerical Support Workers\n5. Service and Sales Workers\n6. Skilled Agricultural, Forestry and Fishery Workers\n7. Craft and Related Trades Workers\n8. Plant and Machine Operators, and Assemblers\n9. Elementary Occupations\n0. Armed Forces Occupations\n"
        }
      ],
      "execution_count": 18,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773887218
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Build prompt\n",
        "prompt = (\n",
        "        f\"We have the following 10 job types based on the ISCO-08 classification:\\n\"\n",
        "        f\"{level_1_titles}\\n\\n\"\n",
        "        f\"Given the following job description, please classify it into one of the above job types by providing the corresponding number and job type:\\n\\n\"\n",
        "        f\"Job Description: \\\"{desc}\\\"\\n\\n\"\n",
        "        f\"Answer:\"\n",
        "    )\n",
        "print(prompt)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "We have the following 10 job types based on the ISCO-08 classification:\n1. Managers\n2. Professionals\n3. Technicians and Associate Professionals\n4. Clerical Support Workers\n5. Service and Sales Workers\n6. Skilled Agricultural, Forestry and Fishery Workers\n7. Craft and Related Trades Workers\n8. Plant and Machine Operators, and Assemblers\n9. Elementary Occupations\n0. Armed Forces Occupations\n\nGiven the following job description, please classify it into one of the above job types by providing the corresponding number and job type:\n\nJob Description: \"Are you looking for a role as a Care Assistant in Ayshire? Do you have a Driving License and Access to a Vehicle? Do you feel that you have what it takes to be a wonderful and compassionate Care Assistant? We are looking for individuals like you to work as a community Care Assistant in your local community. No previous experience is required. At Cera our main priority is to find people with the right values, behaviours and attitudes that can support our mission to help people live longer, healthier and happier lives in their own homes. It would be great to have YOU as part of our team. Our roles include providing personal care and we do require carers to have their own vehicle and driving license. At Cera we arm you with everything you need to give outstanding levels of care; award winning technology, PPE and comprehensive training. Your responsibilities as a Cera Care Assistant: Supporting and assisting with all personal care requirements Providing companionship and supportive listening Observing and reporting any changes in the health or status of the patient Preparing meals and feeding patients Prompting and administering medication Providing support with hobbies, studies, and social activities Completing administrative tasks and care reports. In return for your commitment and hard work, Cera offers: • FREE PVG Checks • FREE Professional Uniform • Flexible Hours - part time or full time, you choose! • Pay rates start from £9.30 per hour. • Mileage Paid • Mobile phone and work app to support with administrative tasks • 3% Company Pension Scheme • Paid assessment day training Postcode areas covered:KA1, KA6, KA7, KA8, KA9, KA10, KA11, KA12, KA19 and KA26 REFTNAYRSCOT\"\n\nAnswer:\n"
        }
      ],
      "execution_count": 19,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773887592
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Settings for API call\n",
        "MODEL = \"gpt-3.5-turbo\"\n",
        "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n",
        "URL = \"https://api.openai.com/v1/chat/completions\""
      ],
      "outputs": [],
      "execution_count": 20,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773887988
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Prepare request\n",
        "headers = {\n",
        "    \"Content-Type\": \"application/json\",\n",
        "    \"Authorization\": f\"Bearer {OPENAI_API_KEY}\"\n",
        "}\n",
        "\n",
        "data = {\n",
        "    \"model\": MODEL,\n",
        "    \"messages\": [\n",
        "        {\"role\": \"user\", \"content\": prompt}\n",
        "    ],\n",
        "    \"temperature\": 0.7  # Adjust temperature for more creative responses\n",
        "}"
      ],
      "outputs": [],
      "execution_count": 21,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773888385
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Make the API request\n",
        "response = requests.post(URL, headers=headers, data=json.dumps(data))"
      ],
      "outputs": [],
      "execution_count": 22,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773888842
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for successful response\n",
        "if response.status_code == 200:\n",
        "    completion = response.json()\n",
        "    print(completion['choices'][0]['message']['content'])\n",
        "else:\n",
        "    print(f\"Error: {response.status_code}\")\n",
        "    print(response.json())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "5. Service and Sales Workers\n"
        }
      ],
      "execution_count": 23,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773889201
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Cost estimation"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming 'tokens_count' is the column containing token counts\n",
        "token_counts = df['description_token_count']\n",
        "\n",
        "# Plotting histogram of token counts\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(token_counts, bins=30, edgecolor='black')\n",
        "plt.xlabel('Token Count')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Token Counts in Job Descriptions')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 24,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773889780
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Total tokens\n",
        "print(df.description_token_count.sum())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "61678091\n"
        }
      ],
      "execution_count": 25,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773890274
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get random sample of 26k job descriptions\n",
        "df_sample = df.sample(26000)"
      ],
      "outputs": [],
      "execution_count": 26,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773890675
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate input tokens\n",
        "input_tokens = df_sample.description_token_count.sum() * 4\n",
        "print(input_tokens)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "57510316\n"
        }
      ],
      "execution_count": 27,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773891202
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate output tokens\n",
        "output_tokens = 30 * 26000 * 4\n",
        "print(output_tokens)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "3120000\n"
        }
      ],
      "execution_count": 28,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773891587
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Princes for GPT 3.5 Turbo (per 1 mln) in $\n",
        "input_cost_mln = 0.5\n",
        "output_cost_mln = 1.5"
      ],
      "outputs": [],
      "execution_count": 29,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773891902
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate cost for tokens\n",
        "input_tokens/(10**6) * input_cost_mln + output_tokens/(10**6) * output_cost_mln"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 30,
          "data": {
            "text/plain": "33.435158"
          },
          "metadata": {}
        }
      ],
      "execution_count": 30,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1719773892346
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Total cost: 33 $ + GPU/CPU instance cost\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)"
    },
    "language_info": {
      "name": "python",
      "version": "3.9.18",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python3"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}